import { BrowserRouter as Router, Routes, Route, Navigate, useNavigate } from 'react-router-dom';
import { useEffect, useState, useContext } from 'react';
import { AppProvider, AppContext } from './contexts/AppContext';
import BottomNav from './components/BottomNav';
import LoginScreen from './screens/LoginScreen';
import RegisterScreen from './screens/RegisterScreen';
import MarketScreen from './screens/MarketScreen';
import CreateOfferScreen from './screens/CreateOfferScreen';
import TradeDetailsScreen from './screens/TradeDetailsScreen';
import ProfileScreen from './screens/ProfileScreen';
import DashboardScreen from './screens/DashboardScreen';
import MyAssetsScreen from './screens/MyAssetsScreen';
import TransactionHistoryScreen from './screens/TransactionHistoryScreen';

// ‚úÖ –ö–û–ú–ü–û–ù–ï–ù–¢ –ö–ù–û–ü–ö–ò –î–õ–Ø –û–¢–ö–†–´–¢–ò–Ø –í TELEGRAM
function TelegramLauncher() {
  const openInTelegram = () => {
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ Telegram
    window.location.href = "tg://resolve?startapp=wallet";
    
    // –§–æ–ª–±—ç–∫ –Ω–∞ –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É
    setTimeout(() => {
      window.location.href = "https://p2pp-2.vercel.app";
    }, 1500);
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –≤ Telegram WebApp
  if (window.Telegram?.WebApp) {
    return null;
  }

  return (
    <div className="fixed top-4 right-4 z-50">
      <button
        onClick={openInTelegram}
        className="bg-[#0088cc] hover:bg-[#0077bb] text-white px-4 py-2 rounded-lg font-semibold text-sm shadow-lg flex items-center gap-2 transition-all"
      >
        <span>üì±</span>
        Open in Telegram
      </button>
    </div>
  );
}

function StartAppHandler() {
  const navigate = useNavigate();
  const { state } = useContext(AppContext);

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const startAppParam = urlParams.get('startapp');
    
    if (startAppParam && startAppParam.includes('wallet')) {
      if (state.isAuthenticated) {
        navigate('/my-assets');
      } else {
        navigate('/login');
      }
    }
  }, [navigate, state.isAuthenticated]);

  return null;
}

function ProtectedRoute({ children }) {
  return (
    <AppContext.Consumer>
      {({ state }) => 
        state.isAuthenticated ? children : <Navigate to="/login" />
      }
    </AppContext.Consumer>
  );
}

function AppContent() {
  const [isTelegramWebApp, setIsTelegramWebApp] = useState(false);
  const { state } = useContext(AppContext);

  useEffect(() => {
    document.documentElement.classList.add('dark');

    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê TELEGRAM CONTEXT
    const initTelegramApp = () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Telegram WebApp
      const isInTelegram = (
        window.Telegram?.WebApp || 
        window.TelegramWebviewProxy || 
        navigator.userAgent.includes('Telegram')
      );

      if (isInTelegram && window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        setIsTelegramWebApp(true);
    
        // ‚úÖ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ WebApp –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç
        const isRealWebApp = tg.initData || tg.initDataUnsafe;
        
        if (isRealWebApp) {
          console.log('üöÄ –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π WebApp - –≤–∫–ª—é—á–∞–µ–º –∑–∞—â–∏—Ç—É');
          
          // 1. –ì–æ—Ç–æ–≤–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          tg.ready();

          // 2. ‚úÖ –°–ò–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –°–í–ê–ô–ü–ê
          const enableProtection = () => {
            tg.expand();
            tg.disableVerticalSwipes(); // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–≤–∞–π–ø –≤–Ω–∏–∑
            tg.enableClosingConfirmation(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            
            // –°–∫—Ä—ã–≤–∞–µ–º —à–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ iOS
            if (!/iPhone|iPad|iPod/.test(navigator.userAgent)) {
              tg.setHeaderColor('bg_color');
            }
          };

          // 3. ‚úÖ –ú–ì–ù–û–í–ï–ù–ù–û –í–ö–õ–Æ–ß–ê–ï–ú –ó–ê–©–ò–¢–£
          enableProtection();


          // 6. ‚úÖ –ó–ê–©–ò–¢–ê –ü–†–ò –õ–Æ–ë–û–ú –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ò
          const handleInteraction = () => {
            setTimeout(enableProtection, 10);
          };
          
          document.addEventListener('click', handleInteraction);
          document.addEventListener('touchstart', handleInteraction);
          document.addEventListener('scroll', handleInteraction);
          document.addEventListener('mousedown', handleInteraction);

          // 7. ‚úÖ –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î
          tg.BackButton.show();
          tg.BackButton.onClick(() => {
            if (window.history.length > 1) {
              window.history.back();
            } else {
              if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?')) {
                tg.close();
              }
            }
          });

          // 8. ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ê–ó–ú–ï–†–ê
          tg.onEvent('viewportChanged', (event) => {
            console.log('üîÑ Viewport –∏–∑–º–µ–Ω–µ–Ω:', event);
            if (!event.isExpanded) {
              setTimeout(enableProtection, 10);
            }
          });

          return () => {
            clearInterval(protectionInterval);
            document.removeEventListener('click', handleInteraction);
            document.removeEventListener('touchstart', handleInteraction);
            document.removeEventListener('scroll', handleInteraction);
            document.removeEventListener('mousedown', handleInteraction);
          };
        } else {
          console.log('‚ö†Ô∏è –≠—Ç–æ —á–∞—Ç —Å –±–æ—Ç–æ–º, –∞ –Ω–µ WebApp - –∑–∞—â–∏—Ç–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        }
      } else {
        console.log('üî¥ Telegram –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
      }
    };

    initTelegramApp();

    // ‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –í–´–°–û–¢–´
    const setAppHeight = () => {
      const docEl = document.documentElement;
      docEl.style.height = '100vh';
      docEl.style.minHeight = '100vh';
      docEl.style.overflow = 'hidden';
    };

    setAppHeight();
    window.addEventListener('resize', setAppHeight);

    return () => {
      window.removeEventListener('resize', setAppHeight);
    };
  }, []);

  // ‚úÖ –ó–ê–©–ò–¢–ê –ü–†–ò –°–ú–ï–ù–ï –°–¢–†–ê–ù–ò–¶
  useEffect(() => {
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ WebApp –∞ –Ω–µ —á–∞—Ç
      if (tg.initData || tg.initDataUnsafe) {
        setTimeout(() => {
          tg.expand();
          tg.disableVerticalSwipes();
        }, 50);
      }
    }
  }, [window.location.pathname]);

  return (
    <Router>
      <StartAppHandler />
      
      {/* ‚úÖ –ö–ù–û–ü–ö–ê –î–õ–Ø –û–¢–ö–†–´–¢–ò–Ø –í TELEGRAM */}
      <TelegramLauncher />
      
      <div 
        className="app-wrapper bg-primary text-white font-sans w-full"
        style={{
          height: '100vh',
          minHeight: '100vh',
          overflow: 'hidden',
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: '#0b1120'
        }}
      >
        <div 
          className="content-area w-full overflow-auto"
          style={{
            height: '100%',
            paddingBottom: '4rem'
          }}
        >
          <Routes>
            <Route path="/login" element={<LoginScreen />} />
            <Route path="/register" element={<RegisterScreen />} />
            <Route path="/" element={<Navigate to="/login" />} />

            <Route
              path="/my-assets"
              element={<ProtectedRoute><MyAssetsScreen /></ProtectedRoute>}
            />
            <Route
              path="/market"
              element={<ProtectedRoute><MarketScreen /></ProtectedRoute>}
            />
            <Route
              path="/create-offer"
              element={<ProtectedRoute><CreateOfferScreen /></ProtectedRoute>}
            />
            <Route
              path="/trade-details/:id"
              element={<ProtectedRoute><TradeDetailsScreen /></ProtectedRoute>}
            />
            <Route
              path="/profile"
              element={<ProtectedRoute><ProfileScreen /></ProtectedRoute>}
            />
            <Route
              path="/dashboard"
              element={<ProtectedRoute><DashboardScreen /></ProtectedRoute>}
            />
            <Route
              path="/transaction-history"
              element={<ProtectedRoute><TransactionHistoryScreen /></ProtectedRoute>}
            />
          </Routes>
        </div>

        {state.isAuthenticated &&
          !['/login', '/register'].includes(window.location.pathname) && (
            <BottomNav />
          )}
      </div>
    </Router>
  );
}

function App() {
  return (
    <AppProvider>
      <AppContent />
    </AppProvider>
  );
}

export default App;